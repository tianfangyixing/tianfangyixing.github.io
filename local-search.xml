<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>25. 记忆化搜索DP</title>
    <link href="/2024/04/08/hello-world/"/>
    <url>/2024/04/08/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="题目没有上司的舞会">题目：没有上司的舞会</h2><h3 id="问题描述">问题描述</h3><p><img src="/images/25/1.png" alt="题目" /> ### 解决方案 设<spanclass="math display">\[dp[i][0]\]</span>为只考虑i号职员及其它的下属，不选i号职员的最大快乐值，设<spanclass="math display">\[dp[i][1]\]</span>为只考虑i号职员及其它的下属，选i号职员的最大快乐值。1. 如果不选<spanclass="math display">\[i\]</span>号职员，那么可以选它的直接下属，也可以不选它的直接下属。2. 如果选<spanclass="math display">\[i\]</span>号职员，那么不可以选它的直接下属。</p><p>得出公式</p><p>$$ <span class="math display">\[\begin{align*}  &amp; dp[i][0]=\sum_{j=1}^{c}max(dp[child(i,j)][1],dp[child(i,j)][0])\\  &amp; dp[i][1]=\sum_{j=1}^{c}dp[child(i,j)][0]\end{align*}\]</span></p><p>$$</p><p>代码如下 <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    dp[i][<span class="hljs-number">1</span>] = H[i];<br>    dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> son : sons[i]) &#123;<br>        <span class="hljs-built_in">dfs</span>(son);<br>        <br>        dp[i][<span class="hljs-number">1</span>] += dp[son][<span class="hljs-number">0</span>];<br>        dp[i][<span class="hljs-number">0</span>] += <span class="hljs-built_in">max</span>(dp[son][<span class="hljs-number">1</span>], dp[son][<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">dfs</span>(root);<br>cout &lt;&lt; <span class="hljs-built_in">max</span>(dp[root][<span class="hljs-number">0</span>], dp[root][<span class="hljs-number">1</span>]) &lt;&lt; endl; <br></code></pre></td></tr></table></figure></p><h2 id="题目滑雪">题目：滑雪</h2><h3 id="问题描述-1">问题描述</h3><p><img src="/images/25/2.png" alt="题目" /> ### 解决方案 定义<spanclass="math display">\[dp[i][j]\]</span>为从第i行，第j列出发的最长轨迹长度，容易得到<span class="math display">\[dp[i][j] =max(dp[i-1][j],dp[i+1][j],dp[i][j+1],dp[i][j-1])+1\]</span>注意去掉高度不满足又或者超界的点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(dp[i][j] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> dp[i][j];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> velocity : velocitys) &#123;<br>        <span class="hljs-type">int</span> x = i + velocity.first;<br>        <span class="hljs-type">int</span> y = j + velocity.second;<br>        <br>        <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">1</span> || x &gt; R || y &lt; <span class="hljs-number">1</span> || y &gt; C || h[x][y] &gt;= h[i][j]) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <br>        dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], <span class="hljs-built_in">dfs</span>(x, y) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(dp[i][j] == <span class="hljs-number">-1</span>) &#123;<br>        dp[i][j] = <span class="hljs-number">1</span>;<br>    &#125;<br>     <br>    <br>    <span class="hljs-keyword">return</span> dp[i][j];<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= R; i++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= C; j++) &#123;<br>        maxLength = <span class="hljs-built_in">max</span>(maxLength, <span class="hljs-built_in">dfs</span>(i, j));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
